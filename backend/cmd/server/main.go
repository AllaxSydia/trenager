package main

import (
	"backend/internal/config"
	"backend/internal/handlers"
	"log"
	"net/http"
	"os"
	"path/filepath"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg := config.Load()

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS middleware
	corsMiddleware := func(next http.HandlerFunc) http.HandlerFunc {
		return func(w http.ResponseWriter, r *http.Request) {
			w.Header().Set("Access-Control-Allow-Origin", "*")
			w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS, PUT, DELETE")
			w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")

			if r.Method == "OPTIONS" {
				w.WriteHeader(http.StatusOK)
				return
			}

			next(w, r)
		}
	}

	// –†–æ—É—Ç—ã API
	http.HandleFunc("/api/tasks", corsMiddleware(handlers.TasksHandler))
	http.HandleFunc("/api/execute", corsMiddleware(handlers.ExecuteHandler))
	http.HandleFunc("/api/auth/guest", corsMiddleware(handlers.GuestAuthHandler))
	http.HandleFunc("/api/auth/register", corsMiddleware(handlers.RegisterHandler))
	http.HandleFunc("/api/auth/login", corsMiddleware(handlers.LoginHandler))

	// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
	http.HandleFunc("/", serveFrontend)

	log.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", cfg.Server.Port)
	log.Fatal(http.ListenAndServe(":"+cfg.Server.Port, nil))
}

func serveFrontend(w http.ResponseWriter, r *http.Request) {
	// –ü—É—Ç—å –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
	staticDir := "./static"
	indexFile := filepath.Join(staticDir, "index.html")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
	if _, err := os.Stat(staticDir); os.IsNotExist(err) {
		// –ï—Å–ª–∏ —Å—Ç–∞—Ç–∏–∫–∏ –Ω–µ—Ç, –æ—Ç–¥–∞–µ–º JSON –æ—Ç–≤–µ—Ç –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
		if r.URL.Path != "/" && r.URL.Path != "/index.html" {
			http.NotFound(w, r)
			return
		}
		// –î–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ –æ—Ç–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		w.Header().Set("Content-Type", "text/html")
		w.Write([]byte(`
			<!DOCTYPE html>
			<html>
			<head>
				<title>Trenager</title>
			</head>
			<body>
				<h1>üöÄ Trenager Backend</h1>
				<p>Frontend static files not found. API is available at <code>/api/*</code></p>
			</body>
			</html>
		`))
		return
	}

	// –û–±—Å–ª—É–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
	fs := http.FileServer(http.Dir(staticDir))

	// –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–¥–∞–µ–º index.html (–¥–ª—è SPA —Ä–æ—É—Ç–∏–Ω–≥–∞)
	if r.URL.Path != "/" && r.URL.Path != "/index.html" {
		filePath := filepath.Join(staticDir, r.URL.Path)
		if _, err := os.Stat(filePath); os.IsNotExist(err) {
			http.ServeFile(w, r, indexFile)
			return
		}
	}

	fs.ServeHTTP(w, r)
}
