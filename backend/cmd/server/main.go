package main

import (
	"backend/internal/config"
	"backend/internal/handlers"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	cfg := config.Load()

	// CORS middleware
	corsMiddleware := func(next http.HandlerFunc) http.HandlerFunc {
		return func(w http.ResponseWriter, r *http.Request) {
			w.Header().Set("Access-Control-Allow-Origin", "*")
			w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS, PUT, DELETE")
			w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")

			if r.Method == "OPTIONS" {
				w.WriteHeader(http.StatusOK)
				return
			}
			next(w, r)
		}
	}

	// API routes
	http.HandleFunc("/api/tasks", corsMiddleware(handlers.TasksHandler))
	http.HandleFunc("/api/execute", corsMiddleware(handlers.ExecuteHandler))
	http.HandleFunc("/api/auth/guest", corsMiddleware(handlers.GuestAuthHandler))
	http.HandleFunc("/api/auth/register", corsMiddleware(handlers.RegisterHandler))
	http.HandleFunc("/api/auth/login", corsMiddleware(handlers.LoginHandler))

	// Serve frontend with SPA routing
	http.HandleFunc("/", serveSPA)

	log.Printf("üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", cfg.Server.Port)
	log.Fatal(http.ListenAndServe(":"+cfg.Server.Port, nil))
}

func serveSPA(w http.ResponseWriter, r *http.Request) {
	// –ï—Å–ª–∏ —ç—Ç–æ API –∑–∞–ø—Ä–æ—Å - 404
	if strings.HasPrefix(r.URL.Path, "/api/") {
		http.NotFound(w, r)
		return
	}

	// –ü—É—Ç—å –∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º
	staticDir := "./static"
	indexPath := filepath.Join(staticDir, "index.html")

	// –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–º—É —Ñ–∞–π–ª—É
	filePath := filepath.Join(staticDir, r.URL.Path)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
	if _, err := os.Stat(filePath); err == nil {
		// –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –æ—Ç–¥–∞–µ–º –µ–≥–æ
		http.ServeFile(w, r, filePath)
		return
	}

	// –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –æ—Ç–¥–∞–µ–º index.html (SPA)
	http.ServeFile(w, r, indexPath)
}
