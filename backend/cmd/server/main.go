package main

import (
	"backend/internal/handlers"
	"log"
	"net/http"
	"os"
)

func main() {
	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º 8080
	port := getPort() // –¥–ª—è Render

	log.Printf("üöÄ Starting server on port %s", port)
	log.Printf("üìÅ Current directory: %s", getCurrentDir())

	// –ï—Å–ª–∏ –Ω–µ static —Ç–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è backend, —Ç–æ–ª—å–∫–æ front –Ω–µ –±—É–¥–µ—Ç
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏–∫–∏
	if _, err := os.Stat("./static"); err != nil {
		log.Printf("‚ö†Ô∏è Static directory not found: %v", err)
	} else {
		log.Println("‚úÖ Static directory found")

		// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ static
		files, _ := os.ReadDir("./static")
		log.Printf("üìÇ Static files count: %d", len(files))
		for _, file := range files {
			log.Printf("   - %s", file.Name())
		}
	}

	// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π CORS middleware
	corsMiddleware := func(next http.HandlerFunc) http.HandlerFunc {
		return func(w http.ResponseWriter, r *http.Request) {
			w.Header().Set("Access-Control-Allow-Origin", "*")
			w.Header().Set("Access-Control-Allow-Methods", "GET, POST, OPTIONS, PUT, DELETE")
			w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization, X-Requested-With")

			if r.Method == "OPTIONS" {
				w.WriteHeader(http.StatusOK)
				return
			}

			next(w, r)
		}
	}

	// –†–æ—É—Ç—ã API
	http.HandleFunc("/api/tasks", corsMiddleware(handlers.TasksHandler))
	http.HandleFunc("/api/execute", corsMiddleware(handlers.ExecuteHandler))
	http.HandleFunc("/api/auth/guest", corsMiddleware(handlers.GuestAuthHandler))
	http.HandleFunc("/api/auth/register", corsMiddleware(handlers.RegisterHandler))
	http.HandleFunc("/api/auth/login", corsMiddleware(handlers.LoginHandler))

	// Test endpoint
	http.HandleFunc("/api/test", corsMiddleware(func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.Write([]byte(`{"status": "ok", "message": "API is working"}`))
	}))

	// Health check
	http.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")
		w.Write([]byte(`{"status": "healthy"}`))
	})

	// Serve frontend static files - –û–ë–ù–û–í–õ–ï–ù–û –î–õ–Ø –ï–î–ò–ù–û–ì–û –ö–û–ù–¢–ï–ô–ù–ï–†–ê
	http.Handle("/", http.FileServer(http.Dir("./static")))

	// Fallback route for SPA - –û–ë–ù–û–í–õ–ï–ù–û
	http.HandleFunc("/index.html", func(w http.ResponseWriter, r *http.Request) {
		http.ServeFile(w, r, "./static/index.html")
	})

	log.Printf("‚úÖ Server ready to accept requests on port %s", port)
	log.Printf("üåê Frontend will be served from /static")
	log.Fatal(http.ListenAndServe(":"+port, nil))
}

func getPort() string {
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080"
	}
	return port
}

func getCurrentDir() string {
	dir, err := os.Getwd()
	if err != nil {
		return "unknown"
	}
	return dir
}
