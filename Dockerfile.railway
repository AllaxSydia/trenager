# Backend build stage
FROM golang:1.24-alpine as backend
WORKDIR /app/backend
COPY backend/ .
RUN go mod download
RUN CGO_ENABLED=0 GOOS=linux go build -o main ./cmd/server

# Frontend build stage  
FROM node:20-alpine as frontend
WORKDIR /app/frontend
COPY frontend/package*.json ./
RUN npm ci
COPY frontend/ .
RUN npm run build

# Final stage - используем образ с Docker!
FROM docker:24-cli-alpine

# Устанавливаем все компиляторы + Docker клиент
RUN apk update && apk --no-cache add \
    python3 \
    nodejs \
    go \
    g++ \
    openjdk17-jre \
    openjdk17 \
    make

# Устанавливаем Docker Compose (опционально)
RUN apk add --no-cache docker-compose

# Копируем бэкенд
COPY --from=backend /app/backend/main .

# Копируем фронтенд
COPY --from=frontend /app/frontend/dist ./static

# Создаем группу docker и добавляем пользователя
RUN addgroup -S docker && adduser -S railway -G docker

# Меняем владельца Docker сокета (если доступен)
USER railway

EXPOSE 8080

# Запускаем бэкенд
CMD ["./main"]